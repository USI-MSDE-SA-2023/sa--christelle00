## ADR #1

1. What did you decide?

Use Python's library Beautiful Soup to scrape information from the websites

2. What was the context for your decision?

As the web platform Seismo Scraping displays everyday recent articles from various websites, the system should be able to scrape automatically and everyday those websites to get the articles. 
We need to find a technology to compute that, giving us enough flexibility to scrape many different websites without having to write one specific script for each. 
Also, as at the time the project had a certain deadline, the solution had to be in place rather quickly.

This decision affects the whole architecture of the scraping part. It does not affect the rest of the backend and the frontend part though. 

3. What is the problem you are trying to solve?

Which technology should be used to get the desired information on each website?

4.  Which alternative options did you consider?
Here are the three scraperâ€™s implementations that were considered as an alternative. 

* Off-the-shelf implementations: existing commercial software suites and services, offering a ready-to-user scraper. Example: Octoparse
* Semi-custom implementations: code is written by the user, using some existing standardized libraries provided in many programming languages. Example: Beautiful Soup
* Fully custom implementations: developed entirely by the user, including the custom libraries. 

5. Which one did you choose?

The semi-custom implementation was chosen. 

6. What is the main reason for that?

The semi-custom implementation has been selected as it provides more flexibility than an off-the-shelf implementation. 
The scraper is then developed especially to fulfill the needs of the project, but without having to write the libraries from scratch. 
In particular, the BeautifulSoup library has been chosen. 
A fully custom implementation could have provided more flexibility but it would not have respected the deadline constraint, and the scope of the project does not require some very specific stuffs unavailable in already existing libraries.

Advantages of the selected alternative:
* No expenses
* Flexibility
* Poorly formed document forgiving (BeautifulSoup)
* Encoding detection (BeautifulSoup)
* Easy to learn
* Quick to implement